name: Stage Readiness Verification

on:
  push:
    branches: [ main, dev, feature/observability-intelligence ]
  pull_request:
    branches: [ main, dev ]

jobs:
  verify-stage-readiness:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git log analysis
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-verification-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-verification-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pyyaml
    
    - name: Run Stage 6.7-6.8.1 Readiness Verification
      id: verify
      run: |
        echo "üß© Starting Stage Readiness Verification..."
        python scripts/verify_stage_readiness.py --ci --json-output stage-readiness-report.json
      continue-on-error: true
    
    - name: Upload verification report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: stage-readiness-report
        path: stage-readiness-report.json
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let reportContent = '## üß© Stage Readiness Verification Results\n\n';
          
          try {
            const report = JSON.parse(fs.readFileSync('stage-readiness-report.json', 'utf8'));
            
            reportContent += `**Timestamp:** ${report.timestamp}\n\n`;
            reportContent += `### Summary\n`;
            reportContent += `- ‚úÖ Passed: ${report.summary.passed}\n`;
            reportContent += `- ‚ö†Ô∏è Warnings: ${report.summary.warnings}\n`;
            reportContent += `- ‚ùå Failures: ${report.summary.failures}\n\n`;
            
            if (report.ready_for_stage_7) {
              reportContent += `### üöÄ Result: READY FOR STAGE 7\n\n`;
              reportContent += `All critical checks passed. This PR is ready to be merged.\n`;
            } else {
              reportContent += `### üö´ Result: NOT READY FOR STAGE 7\n\n`;
              reportContent += `Critical issues found. Please address the following before merging:\n\n`;
              
              for (const [checkName, checkResult] of Object.entries(report.checks)) {
                if (!checkResult.passed && checkResult.issues) {
                  reportContent += `#### ${checkName}\n`;
                  for (const issue of checkResult.issues) {
                    reportContent += `- ‚ùå ${issue}\n`;
                  }
                  reportContent += '\n';
                }
              }
            }
          } catch (error) {
            reportContent += `‚ö†Ô∏è Could not parse verification report: ${error.message}\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reportContent
          });
    
    - name: Fail if not ready
      if: steps.verify.outcome == 'failure'
      run: |
        echo "‚ùå Stage readiness verification failed"
        exit 1
