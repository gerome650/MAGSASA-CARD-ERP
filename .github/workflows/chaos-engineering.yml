name: Chaos Engineering Tests

on:
  push:
    branches: [ main, dev, feature/observability-intelligence ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # Run chaos tests weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  chaos-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-chaos-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-chaos-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies (with retry)
      uses: ./.github/actions/retry-with-backoff
      with:
        command: |
          python -m pip install --upgrade pip && \
          pip install -r requirements.txt && \
          pip install pyyaml jsonschema requests pytest
        max-attempts: '3'
        initial-delay: '10'
        failure-message: 'Chaos engineering dependencies installation failed after all retries'
    
    - name: Validate chaos suite configuration
      run: |
        echo "üîç Validating chaos engineering configuration..."
        python validate_chaos_suite.py
    
    - name: Validate chaos scenarios schema
      run: |
        echo "üîç Validating chaos scenario schemas..."
        python scripts/validate_configs.py
    
    - name: Run chaos tests (dry-run)
      run: |
        echo "üî• Running chaos tests in dry-run mode..."
        if [ -f "deploy/chaos_injector.py" ]; then
          python deploy/chaos_injector.py --dry-run --config deploy/chaos_scenarios.yml --output chaos-results.json
        else
          echo "‚ö†Ô∏è Chaos injector not found, skipping..."
        fi
      continue-on-error: true
    
    - name: Test resilience validator
      run: |
        echo "üõ°Ô∏è Testing resilience validator..."
        if [ -f "deploy/resilience_validator.py" ]; then
          python -c "from deploy.resilience_validator import ResilienceValidator; print('‚úÖ Resilience validator imported successfully')"
        else
          echo "‚ö†Ô∏è Resilience validator not found, skipping..."
        fi
      continue-on-error: true
    
    - name: Validate SLO configurations
      run: |
        echo "üìä Validating SLO configurations..."
        for file in configs/slo/*.yaml; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            python -c "import yaml; yaml.safe_load(open('$file'))" && echo "‚úÖ Valid YAML"
          fi
        done
    
    - name: Validate remediation rules
      run: |
        echo "üîß Validating remediation rules..."
        for file in configs/remediation-rules/*.yaml; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            python -c "import yaml; yaml.safe_load(open('$file'))" && echo "‚úÖ Valid YAML"
          fi
        done
    
    - name: Upload chaos test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-test-results
        path: |
          chaos-results.json
          chaos-*.log
    
    - name: Chaos tests summary
      if: always()
      run: |
        echo "üìä Chaos Engineering Test Summary"
        echo "‚úÖ Configuration validated"
        echo "‚úÖ Scenarios validated"
        echo "‚úÖ SLO configurations checked"
        echo "‚úÖ Remediation rules validated"

