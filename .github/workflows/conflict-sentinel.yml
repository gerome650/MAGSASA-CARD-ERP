name: "üîç Conflict Sentinel"

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'Makefile'
      - '.github/workflows/**'
      - 'pyproject.toml'
      - 'src/**'
      - 'packages/**'

env:
  CONFLICT_LABEL: "‚ö†Ô∏è Conflict Review Needed"

jobs:
  conflict-detection:
    name: "üîç Detect Merge Conflicts"
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      actions: read
    
    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "üêç Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: "üì¶ Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "‚ö†Ô∏è requirements.txt not found, continuing..."
      
      - name: "üîç Run Conflict Detection (Dry Run)"
        id: conflict-check
        run: |
          echo "üîç Running Conflict Sentinel in dry-run mode..."
          echo "============================================="
          
          # Capture output for reporting
          if make resolve-conflicts DRY_RUN=true > conflict-report.txt 2>&1; then
            echo "‚úÖ No conflicts detected"
            echo "conflicts_detected=false" >> $GITHUB_OUTPUT
            echo "exit_code=0" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Conflicts detected"
            echo "conflicts_detected=true" >> $GITHUB_OUTPUT
            echo "exit_code=$?" >> $GITHUB_OUTPUT
          fi
          
          # Display the report
          echo ""
          echo "üìã Conflict Detection Report:"
          echo "============================="
          cat conflict-report.txt
          
          # Store report content for comment
          {
            echo 'CONFLICT_REPORT<<EOF'
            cat conflict-report.txt
            echo 'EOF'
          } >> $GITHUB_OUTPUT
      
      - name: "üìã Create/Ensure Conflict Label Exists"
        if: always()
        run: |
          echo "üè∑Ô∏è Ensuring conflict label exists..."
          
          # Check if label exists
          if gh label list --json name | jq -r '.[].name' | grep -q "^${{ env.CONFLICT_LABEL }}$"; then
            echo "‚úÖ Label '${{ env.CONFLICT_LABEL }}' already exists"
          else
            echo "üìù Creating label '${{ env.CONFLICT_LABEL }}'..."
            gh label create "${{ env.CONFLICT_LABEL }}" \
              --description "This PR has merge conflicts that need manual resolution" \
              --color "d93f0b" || echo "‚ö†Ô∏è Failed to create label (may already exist)"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "üè∑Ô∏è Apply/Remove Conflict Label"
        if: always()
        run: |
          echo "üè∑Ô∏è Managing conflict label based on detection results..."
          
          if [ "${{ steps.conflict-check.outputs.conflicts_detected }}" = "true" ]; then
            echo "‚ùå Applying conflict label..."
            gh pr edit ${{ github.event.pull_request.number }} --add-label "${{ env.CONFLICT_LABEL }}" || echo "‚ö†Ô∏è Failed to add label"
          else
            echo "‚úÖ Removing conflict label if present..."
            gh pr edit ${{ github.event.pull_request.number }} --remove-label "${{ env.CONFLICT_LABEL }}" || echo "‚ÑπÔ∏è Label not present or failed to remove"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "üí¨ Post Conflict Detection Results"
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ## üîç Conflict Sentinel Report
            
            **Status:** ${{ steps.conflict-check.outputs.conflicts_detected == 'true' && '‚ùå CONFLICTS DETECTED' || '‚úÖ NO CONFLICTS FOUND' }}
            
            **Detection Results:**
            ```
            ${{ steps.conflict-check.outputs.CONFLICT_REPORT }}
            ```
            
            ### üìã Next Steps
            
            ${{ steps.conflict-check.outputs.conflicts_detected == 'true' && format('
            **üö® ACTION REQUIRED:**
            1. **Review** the conflicting files listed above
            2. **Resolve** conflicts manually using your preferred method:
               ```bash
               # Option 1: Use the automated resolver
               make resolve-conflicts
               
               # Option 2: Manual resolution
               git status                    # See conflicting files
               git diff                     # Review conflicts
               # Edit files to resolve conflicts
               git add <resolved-files>     # Stage resolved files
               git commit                   # Complete resolution
               ```
            3. **Test** your changes thoroughly
            4. **Push** the resolved changes to this PR
            
            ‚ö†Ô∏è **This PR will remain blocked until conflicts are resolved.**
            ', '') || '
            **üéâ All Clear!** No merge conflicts detected.
            
            This PR is ready for review and merge.
            ' }}
            
            ### üîß Local Development
            
            To run conflict detection locally:
            ```bash
            # Dry run (detection only)
            make resolve-conflicts DRY_RUN=true
            
            # Full resolution attempt
            make resolve-conflicts
            ```
            
            ---
            *ü§ñ This report was generated by the Conflict Sentinel workflow*
      
      - name: "üì¶ Upload Conflict Report Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conflict-detection-report-${{ github.event.pull_request.number }}
          path: conflict-report.txt
          retention-days: 7
      
      - name: "üîç Debug Information"
        if: failure()
        run: |
          echo "üêõ Debug Information:"
          echo "===================="
          echo "Git Status:"
          git status --porcelain || true
          echo ""
          echo "Git Log (last 5 commits):"
          git log --oneline -5 || true
          echo ""
          echo "Current Branch:"
          git branch --show-current || true
          echo ""
          echo "Makefile exists:"
          ls -la Makefile || echo "‚ùå Makefile not found"
          echo ""
          echo "Workflow files:"
          ls -la .github/workflows/ || echo "‚ùå Workflows directory not found"
      
      - name: "‚ùå Fail on Conflicts Detected"
        if: steps.conflict-check.outputs.conflicts_detected == 'true'
        run: |
          echo "‚ùå MERGE CONFLICTS DETECTED!"
          echo "============================="
          echo ""
          echo "üö® This PR contains merge conflicts that must be resolved before it can be merged."
          echo ""
          echo "üìã Files with conflicts:"
          cat conflict-report.txt | grep "‚ùå Conflict detected in:" || echo "   (See full report above)"
          echo ""
          echo "üîß To resolve conflicts:"
          echo "   1. Check out this PR branch locally"
          echo "   2. Run: make resolve-conflicts"
          echo "   3. Review and test the resolved changes"
          echo "   4. Commit and push the resolution"
          echo ""
          echo "üí° The PR has been labeled with '‚ö†Ô∏è Conflict Review Needed' for visibility."
          exit 1
      
      - name: "‚úÖ Success - No Conflicts"
        if: steps.conflict-check.outputs.conflicts_detected == 'false'
        run: |
          echo "‚úÖ CONFLICT DETECTION PASSED!"
          echo "============================="
          echo ""
          echo "üéâ No merge conflicts detected in this PR."
          echo "‚úÖ The PR is ready for review and merge."
          echo ""
          echo "üìã Scanned files:"
          echo "   - Makefile"
          echo "   - .github/workflows/*.yml"
          echo "   - pyproject.toml"
          echo "   - Git status (unmerged paths)"
          echo "   - Stash entries"
          echo ""
          echo "üè∑Ô∏è Conflict label has been removed if it was present."
