name: MCP Dry Run Validation

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  mcp-dry-run:
    name: MCP Simulation & Validation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv sync --dev
      
      - name: Enable MCP Mode
        run: |
          echo "AGS_MCP_ENABLED=true" >> $GITHUB_ENV
      
      - name: Run MCP Readiness Check
        run: |
          uv run ags mcp-check
      
      - name: Run Full Agent Simulation with Trace
        run: |
          uv run ags agent run all --trace
      
      - name: Validate Structured Logs
        run: |
          # Check that logs contain required fields
          uv run ags agent run all 2>&1 | grep -q "request_id" || exit 1
          uv run ags agent run all 2>&1 | grep -q "latency_ms" || exit 1
          uv run ags agent run all 2>&1 | grep -q "status" || exit 1
          echo "âœ… Structured logging validation passed"
      
      - name: Health Check
        run: |
          uv run ags health-check
      
      - name: Generate MCP Validation Report
        if: always()
        run: |
          echo "## MCP Validation Report" > mcp-report.md
          echo "" >> mcp-report.md
          echo "**Python Version:** ${{ matrix.python-version }}" >> mcp-report.md
          echo "**MCP Mode:** Enabled" >> mcp-report.md
          echo "" >> mcp-report.md
          echo "### Agent Readiness" >> mcp-report.md
          uv run ags mcp-check >> mcp-report.md 2>&1 || true
          echo "" >> mcp-report.md
          echo "### Agent Simulation Results" >> mcp-report.md
          uv run ags agent run all --trace >> mcp-report.md 2>&1 || true
      
      - name: Upload MCP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-validation-report-py${{ matrix.python-version }}
          path: mcp-report.md
          retention-days: 30
      
      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && matrix.python-version == '3.12'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('mcp-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ§  MCP Dry Run Results\n\n${report}`
            });

  mcp-integration-test:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    needs: mcp-dry-run
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv sync --dev
      
      - name: Run Unit Tests
        run: |
          uv run pytest tests/ -v --tb=short --cov=packages --cov-report=xml
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: mcp-integration
          name: codecov-mcp

  mcp-security-scan:
    name: MCP Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

