name: CI Intelligence Weekly Report

on:
  schedule:
    # Run every Sunday at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      days:
        description: 'Number of days to analyze'
        required: false
        default: '7'
      create_issue:
        description: 'Create GitHub issue with report'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  issues: write
  pull-requests: read

jobs:
  generate-intelligence-report:
    name: Generate Weekly CI Intelligence Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install additional dependencies for reporting
          pip install tabulate
      
      - name: Download CI history database artifact
        id: download-db
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ci-failure-history-db
          path: .
      
      - name: Restore database from previous runs
        if: steps.download-db.outcome == 'failure'
        run: |
          # Try to fetch from ci-reports branch
          git fetch origin ci-reports:ci-reports || true
          if git show-ref --verify --quiet refs/heads/ci-reports; then
            git checkout ci-reports -- ci_failure_history.db || echo "No existing database found"
            git checkout main
          fi
          
          # Initialize database if it doesn't exist
          if [ ! -f ci_failure_history.db ]; then
            echo "📊 Initializing new CI history database..."
            python3 << EOF
          import sqlite3
          from pathlib import Path
          # Import and initialize from analyze_ci_failure.py
          import sys
          sys.path.insert(0, 'scripts')
          from analyze_ci_failure import HistoricalDatabase
          db = HistoricalDatabase('ci_failure_history.db')
          db.close()
          print("✅ Database initialized")
          EOF
          fi
      
      - name: Set analysis period
        id: set-period
        run: |
          DAYS="${{ github.event.inputs.days || '7' }}"
          echo "days=$DAYS" >> $GITHUB_OUTPUT
          echo "📅 Analyzing last $DAYS days"
      
      - name: Generate intelligence report
        id: generate
        run: |
          echo "🧠 Generating CI Intelligence Report..."
          
          mkdir -p reports
          
          python scripts/generate_ci_intelligence_report.py \
            --days ${{ steps.set-period.outputs.days }} \
            --output reports/CI_WEEKLY_INTELLIGENCE.md \
            --db-path ci_failure_history.db
          
          if [ -f reports/CI_WEEKLY_INTELLIGENCE.md ]; then
            echo "✅ Report generated successfully"
            echo "report_generated=true" >> $GITHUB_OUTPUT
            
            # Extract key metrics for summary
            REPORT_DATE=$(date +%Y-%m-%d)
            echo "report_date=$REPORT_DATE" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Report generation failed or no data available"
            echo "report_generated=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload database as artifact
        if: steps.generate.outputs.report_generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ci-failure-history-db
          path: ci_failure_history.db
          retention-days: 90
      
      - name: Commit report to ci-reports branch
        if: steps.generate.outputs.report_generated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create or switch to ci-reports branch
          git fetch origin ci-reports:ci-reports || git branch ci-reports
          git checkout ci-reports
          
          # Copy report and database
          mkdir -p reports
          git checkout main -- reports/CI_WEEKLY_INTELLIGENCE.md
          git checkout main -- ci_failure_history.db
          
          # Archive with timestamp
          TIMESTAMP=$(date +%Y-%m-%d)
          cp reports/CI_WEEKLY_INTELLIGENCE.md "reports/CI_REPORT_${TIMESTAMP}.md"
          
          # Commit changes
          git add reports/ ci_failure_history.db
          git commit -m "📊 Weekly CI Intelligence Report - ${TIMESTAMP}

          Automated report generated by CI Intelligence Agent
          
          - Analysis period: ${{ steps.set-period.outputs.days }} days
          - Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          " || echo "No changes to commit"
          
          git push origin ci-reports
      
      - name: Create or update GitHub issue
        if: |
          steps.generate.outputs.report_generated == 'true' && 
          (github.event.inputs.create_issue != 'false' || github.event_name == 'schedule')
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          REPORT_DATE="${{ steps.generate.outputs.report_date }}"
          ISSUE_TITLE="🧠 Weekly CI Intelligence Report – $REPORT_DATE"
          
          # Read report content
          REPORT_CONTENT=$(cat reports/CI_WEEKLY_INTELLIGENCE.md)
          
          # Create issue body
          cat > issue_body.md << 'EOF'
          ## 📊 Automated Weekly CI Intelligence Report
          
          This report provides insights into CI/CD health, failure patterns, and auto-fix effectiveness.
          
          EOF
          
          echo "$REPORT_CONTENT" >> issue_body.md
          
          cat >> issue_body.md << EOF
          
          ---
          
          ## 🗺️ Roadmap Status
          EOF
          
          # Add roadmap status if Notion is configured
          if [ -n "${{ secrets.NOTION_API_KEY }}" ] && [ -n "${{ secrets.NOTION_ROADMAP_DB_ID }}" ]; then
            echo "- 🧩 **Current Milestone:** Stage 7.3 - Notion Intelligence Sync" >> issue_body.md
            echo "- 📊 **Progress:** Auto-calculated from CI metrics" >> issue_body.md
            echo "- 🔗 **[View Full Roadmap in Notion](https://notion.so/${{ secrets.NOTION_ROADMAP_DB_ID }})**" >> issue_body.md
          else
            echo "- ℹ️ Roadmap sync not configured (requires Notion API key and database ID)" >> issue_body.md
          fi
          
          cat >> issue_body.md << EOF
          
          ### 📎 Links
          - [Full Report Archive](https://github.com/${{ github.repository }}/tree/ci-reports/reports)
          - [CI History Database](https://github.com/${{ github.repository }}/blob/ci-reports/ci_failure_history.db)
          - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### 🔧 Actions
          - Review recommendations and implement suggested improvements
          - Investigate rising failure trends
          - Validate auto-fix success rates
          - Update milestone progress in Notion roadmap
          
          *Automatically generated by CI Intelligence Agent v2.0 with Roadmap Integration*
          EOF
          
          # Check if issue already exists for this week
          EXISTING_ISSUE=$(gh issue list \
            --label "ci-intelligence" \
            --state open \
            --search "$REPORT_DATE" \
            --json number,title \
            --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_ISSUE" ]; then
            echo "📝 Updating existing issue #$EXISTING_ISSUE"
            gh issue edit "$EXISTING_ISSUE" --body-file issue_body.md
          else
            echo "📝 Creating new issue"
            gh issue create \
              --title "$ISSUE_TITLE" \
              --body-file issue_body.md \
              --label "ci-intelligence,automation,weekly-report"
          fi
      
      - name: Post summary
        if: always()
        run: |
          echo "## 🧠 CI Intelligence Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.generate.outputs.report_generated }}" == "true" ]; then
            echo "✅ **Report Generated Successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 📅 Analysis Period: ${{ steps.set-period.outputs.days }} days" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 Report Date: ${{ steps.generate.outputs.report_date }}" >> $GITHUB_STEP_SUMMARY
            echo "- 📁 Location: \`reports/CI_WEEKLY_INTELLIGENCE.md\`" >> $GITHUB_STEP_SUMMARY
            echo "- 🌳 Branch: [ci-reports](https://github.com/${{ github.repository }}/tree/ci-reports)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show preview of report
            echo "### 📋 Report Preview" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -n 30 reports/CI_WEEKLY_INTELLIGENCE.md >> $GITHUB_STEP_SUMMARY
            echo "..." >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Report Generation Failed or No Data Available**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This could be because:" >> $GITHUB_STEP_SUMMARY
            echo "- No CI failures have been recorded yet" >> $GITHUB_STEP_SUMMARY
            echo "- The history database is empty" >> $GITHUB_STEP_SUMMARY
            echo "- There was an error during generation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run some CI analyses first to populate the database." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Cleanup
        if: always()
        run: |
          git checkout main || true
          rm -f issue_body.md

