name: ü´Ä Governance Heartbeat

on:
  workflow_dispatch:
    inputs:
      force_status:
        description: "Optional: Override status badge (e.g., healthy, warning, drift)"
        required: false
        default: ""
      dry_run:
        description: "Run workflow without posting to Slack or GitHub issue"
        required: false
        default: "false"
  schedule:
    - cron: "0 12 1 */3 *"   # Every 3 months on the 1st day at 12:00 UTC

jobs:
  heartbeat-metrics-ping:
    name: "üìä Governance Metrics Ping (Slack + Render)"
    runs-on: ubuntu-latest
    env:
      UPTIME_THRESHOLD: "98.0"
      LATENCY_THRESHOLD: "4000"
      ERROR_RATE_THRESHOLD: "2.0"
    outputs:
      uptime: ${{ steps.render.outputs.uptime }}
      latency: ${{ steps.render.outputs.latency }}
      error_rate: ${{ steps.render.outputs.error_rate }}
      anomaly_status: ${{ steps.anomaly.outputs.status }}
      anomaly_message: ${{ steps.anomaly.outputs.message }}
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Fetch Render Metrics"
        id: render
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/metrics")
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT
          UPTIME=$(echo "$RESPONSE" | jq -r '.uptime // "unavailable"')
          LATENCY=$(echo "$RESPONSE" | jq -r '.latency_ms // "unavailable"')
          ERROR_RATE=$(echo "$RESPONSE" | jq -r '.error_rate // "unavailable"')
          echo "uptime=$UPTIME" >> $GITHUB_OUTPUT
          echo "latency=$LATENCY" >> $GITHUB_OUTPUT
          echo "error_rate=$ERROR_RATE" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: "Analyze Metrics for Anomalies"
        id: anomaly
        run: |
          UPTIME="${{ steps.render.outputs.uptime }}"
          LATENCY="${{ steps.render.outputs.latency }}"
          ERROR_RATE="${{ steps.render.outputs.error_rate }}"

          STATUS="healthy"
          MESSAGE="‚úÖ All metrics within thresholds."

          # Check uptime threshold
          if [ "$UPTIME" != "unavailable" ]; then
            if (( $(echo "$UPTIME < $UPTIME_THRESHOLD" | bc -l) )); then
              STATUS="drift-detected"
              MESSAGE="‚ö†Ô∏è Uptime below threshold ($UPTIME% < $UPTIME_THRESHOLD%)"
            fi
          fi

          # Check latency threshold
          if [ "$LATENCY" != "unavailable" ]; then
            if (( $(echo "$LATENCY > $LATENCY_THRESHOLD" | bc -l) )); then
              STATUS="drift-detected"
              if [ "$MESSAGE" = "‚úÖ All metrics within thresholds." ]; then
                MESSAGE="‚ö†Ô∏è Latency above threshold ($LATENCY ms > $LATENCY_THRESHOLD ms)"
              else
                MESSAGE="$MESSAGE; Latency above threshold ($LATENCY ms > $LATENCY_THRESHOLD ms)"
              fi
            fi
          fi

          # Check error rate threshold
          if [ "$ERROR_RATE" != "unavailable" ]; then
            if (( $(echo "$ERROR_RATE > $ERROR_RATE_THRESHOLD" | bc -l) )); then
              STATUS="drift-detected"
              if [ "$MESSAGE" = "‚úÖ All metrics within thresholds." ]; then
                MESSAGE="‚ö†Ô∏è Error rate above threshold ($ERROR_RATE% > $ERROR_RATE_THRESHOLD%)"
              else
                MESSAGE="$MESSAGE; Error rate above threshold ($ERROR_RATE% > $ERROR_RATE_THRESHOLD%)"
              fi
            fi
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: "üìú Append anomaly record to governance-history.json"
        id: history
        run: |
          FILE="governance-history.json"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          UPTIME="${{ steps.render.outputs.uptime }}"
          LATENCY="${{ steps.render.outputs.latency }}"
          ERROR_RATE="${{ steps.render.outputs.error_rate }}"
          STATUS="${{ steps.anomaly.outputs.status }}"
          MESSAGE="${{ steps.anomaly.outputs.message }}"

          # Create file if it doesn't exist
          if [ ! -f "$FILE" ]; then
            echo "[]" > $FILE
          fi

          # Append record to JSON array
          tmp=$(mktemp)
          jq --arg ts "$TIMESTAMP" \
             --arg uptime "$UPTIME" \
             --arg latency "$LATENCY" \
             --arg error "$ERROR_RATE" \
             --arg status "$STATUS" \
             --arg message "$MESSAGE" \
             '. += [{"timestamp": $ts, "uptime": $uptime, "latency": $latency, "error_rate": $error, "status": $status, "message": $message}]' \
             $FILE > "$tmp" && mv "$tmp" $FILE

          echo "‚úÖ Anomaly record appended to $FILE"
          cat $FILE

      - name: "üíæ Commit anomaly history"
        if: always()
        run: |
          git config user.name "governance-bot"
          git config user.email "governance-bot@users.noreply.github.com"
          git add governance-history.json
          git commit -m "chore: update governance anomaly history [skip ci]" --no-verify || echo "No changes to commit"
          git push

      # ===============================
      # üìä Drift Dashboard Integration (Auto-Inserted)
      # ===============================
      - name: "üêç Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "üì¶ Install dashboard deps"
        run: |
          python -m pip install --upgrade pip
          python -m pip install matplotlib

      - name: "üìä Generate Drift Dashboard"
        run: |
          python scripts/qa/gov_drift_dashboard.py
          test -f governance-drift-dashboard.html
          test -f governance-drift-dashboard.md

      - name: "üìé Upload Dashboard Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: governance-drift-dashboard
          path: |
            governance-drift-dashboard.html
            governance-drift-dashboard.md
          retention-days: 30

      - name: "üßæ Comment on Governance Heartbeat Issue"
        if: ${{ always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DASHBOARD_ARTIFACT="Check **Artifacts** in this workflow run"
          {
            echo ""
            echo "### üìä Governance Drift Dashboard"
            echo "- üìé $DASHBOARD_ARTIFACT"
            echo "- üïí Generated on: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          } > heartbeat_dashboard_comment.md

          ISSUE_NUMBER=$(gh issue list --label heartbeat --state open --json number --jq '.[0].number' || true)

          if [ -n "$ISSUE_NUMBER" ]; then
            gh issue comment "$ISSUE_NUMBER" --body-file heartbeat_dashboard_comment.md
          else
            echo "‚ö†Ô∏è No open heartbeat issue found ‚Äî skipping comment."
          fi

      # ===============================
      # üìå Pin Latest Dashboard to Top of Issue
      # ===============================
      - name: "üßÆ Evaluate Status Badge from Guardrails"
        id: evaluate-badge
        run: |
          # Install yq if not available
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi

          # Extract thresholds from guardrails file
          UPTIME_THRESHOLD=$(yq '.observer_guardrails.runtime_constraints.uptime_percent.min' specs/observer_guardrails.yaml)
          LATENCY_THRESHOLD=$(yq '.observer_guardrails.runtime_constraints.latency_ms.max' specs/observer_guardrails.yaml)
          LATENCY_WARNING=$(yq '.observer_guardrails.runtime_constraints.latency_ms.warning_threshold' specs/observer_guardrails.yaml)

          # Extract live metrics from previous step outputs
          UPTIME="${{ steps.render.outputs.uptime }}"
          LATENCY="${{ steps.render.outputs.latency }}"
          ERROR_RATE="${{ steps.render.outputs.error_rate }}"

          echo "üìä Thresholds from guardrails:"
          echo "  - Uptime min: $UPTIME_THRESHOLD%"
          echo "  - Latency max: $LATENCY_THRESHOLD ms"
          echo "  - Latency warning: $LATENCY_WARNING ms"
          echo ""
          echo "üìà Current metrics:"
          echo "  - Uptime: $UPTIME%"
          echo "  - Latency: $LATENCY ms"
          echo "  - Error Rate: $ERROR_RATE%"

          STATUS="healthy"
          
          # Handle unavailable metrics
          if [ "$UPTIME" = "unavailable" ] || [ "$LATENCY" = "unavailable" ]; then
            STATUS="warning"
            echo "‚ö†Ô∏è Some metrics unavailable ‚Äî defaulting to warning status"
          else
            # Check for drift conditions (critical)
            if (( $(echo "$UPTIME < $UPTIME_THRESHOLD" | bc -l) )); then
              STATUS="drift"
              echo "üî¥ DRIFT: Uptime $UPTIME% < threshold $UPTIME_THRESHOLD%"
            elif (( $(echo "$LATENCY > $LATENCY_THRESHOLD" | bc -l) )); then
              STATUS="drift"
              echo "üî¥ DRIFT: Latency $LATENCY ms > threshold $LATENCY_THRESHOLD ms"
            # Check for warning conditions (approaching thresholds)
            elif (( $(echo "$UPTIME < ($UPTIME_THRESHOLD + 0.5)" | bc -l) )); then
              STATUS="warning"
              echo "üü° WARNING: Uptime approaching threshold ($UPTIME% near $UPTIME_THRESHOLD%)"
            elif (( $(echo "$LATENCY > $LATENCY_WARNING" | bc -l) )); then
              STATUS="warning"
              echo "üü° WARNING: Latency above warning threshold ($LATENCY ms > $LATENCY_WARNING ms)"
            else
              echo "‚úÖ All metrics healthy"
            fi
          fi

          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "üìå Final status: $STATUS"

      - name: "üìå Pin Dashboard Link in Heartbeat Issue"
        if: ${{ always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=$(gh issue list --label heartbeat --state open --json number --jq '.[0].number' || true)

          if [ -z "$ISSUE_NUMBER" ]; then
            echo "‚ö†Ô∏è No open heartbeat issue found ‚Äî skipping pinning."
            exit 0
          fi

          DASHBOARD_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Pick badge color based on evaluated status
          case "${{ steps.evaluate-badge.outputs.status }}" in
            healthy)
              BADGE_URL="https://img.shields.io/badge/Governance-Healthy-brightgreen?style=for-the-badge"
              ;;
            warning)
              BADGE_URL="https://img.shields.io/badge/Governance-Warning-yellow?style=for-the-badge"
              ;;
            drift)
              BADGE_URL="https://img.shields.io/badge/Governance-Drift%20Detected-red?style=for-the-badge"
              ;;
          esac

          BADGE_MD="![Governance Status](${BADGE_URL})"
          DASHBOARD_MD="> üìä **Latest Drift Dashboard:** [View Dashboard Artifacts]($DASHBOARD_URL) ${BADGE_MD}\n> üïí Last updated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          EXISTING_BODY=$(gh issue view "$ISSUE_NUMBER" --json body --jq '.body')

          if echo "$EXISTING_BODY" | grep -q "üìä **Latest Drift Dashboard:**"; then
            # Replace existing pinned dashboard line
            NEW_BODY=$(echo "$EXISTING_BODY" | sed "s|> üìä **Latest Drift Dashboard:.*|$DASHBOARD_MD|")
          else
            # Prepend dashboard link to issue body
            NEW_BODY="$DASHBOARD_MD\n\n$EXISTING_BODY"
          fi

          echo "$NEW_BODY" > updated_issue_body.md
          gh issue edit "$ISSUE_NUMBER" --body-file updated_issue_body.md

      - name: "Post Governance Metrics to Slack"
        run: |
          UPTIME="${{ steps.render.outputs.uptime }}"
          LATENCY="${{ steps.render.outputs.latency }}"
          ERROR_RATE="${{ steps.render.outputs.error_rate }}"
          ANOMALY_MESSAGE="${{ steps.anomaly.outputs.message }}"

          if [ "$UPTIME" = "unavailable" ]; then
            MESSAGE="‚ö†Ô∏è *Governance Heartbeat Metrics Failed*\nRender metrics unavailable. Check API key or service ID."
          else
            MESSAGE="‚úÖ *Governance Heartbeat Metrics*\nüß≠ Uptime: $UPTIME%\n‚ö° Latency: $LATENCY ms\nüö® Error Rate: $ERROR_RATE%\n\n$ANOMALY_MESSAGE"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"$MESSAGE\"}" \
            ${{ secrets.SLACK_GOVERNANCE_WEBHOOK }}
        continue-on-error: false

  heartbeat:
    runs-on: ubuntu-latest
    needs: [heartbeat-metrics-ping]
    steps:
      - name: üß† Create or Update Governance Heartbeat Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issueTitle = "ü´Ä Governance Heartbeat ‚Äî Review Required";
            
            const uptime = "${{ needs.heartbeat-metrics-ping.outputs.uptime }}";
            const latency = "${{ needs.heartbeat-metrics-ping.outputs.latency }}";
            const errorRate = "${{ needs.heartbeat-metrics-ping.outputs.error_rate }}";
            const anomalyStatus = "${{ needs.heartbeat-metrics-ping.outputs.anomaly_status }}";
            const anomalyMessage = "${{ needs.heartbeat-metrics-ping.outputs.anomaly_message }}";
            
            const body = `
            ## üß≠ Governance Review Checklist

            This is your scheduled governance heartbeat reminder.  
            Please review and verify that the following **governance anchors** remain accurate, enforced, and in sync:

            - [ ] SYSTEM_PROMPT.md
            - [ ] .github/GOVERNANCE_BRANCH_PROTECTION_CHECKLIST.md
            - [ ] .github/CODEOWNERS
            - [ ] .github/PULL_REQUEST_TEMPLATE.md
            - [ ] .github/workflows/pr-governance-check.yml
            - [ ] specs/observer_guardrails.yaml
            - [ ] specs/render_integration.md
            - [ ] specs/slack_integration.md
            - [ ] specs/mcp-architecture.md

            ## üß≠ Render Metrics (Auto-collected)
            - **Uptime**: ${uptime}${uptime === "unavailable" ? "" : "%"}
            - **Latency**: ${latency}${latency === "unavailable" ? "" : " ms"}
            - **Error Rate**: ${errorRate}${errorRate === "unavailable" ? "" : "%"}

            ## üö® Anomaly Detection Status
            ${anomalyMessage}

            üßë‚Äç‚öñÔ∏è Governance Team:
            - @gerome650
            - @pepoy-songco
            - @lia-anonas

            üìÖ Next heartbeat will auto-trigger in 90 days.
            `;
            
            // Determine labels based on anomaly status
            const baseLabels = ["governance", "heartbeat"];
            const statusLabel = anomalyStatus === "drift-detected" ? "‚ö†Ô∏è drift-detected" : "‚úÖ healthy";
            const allLabels = [...baseLabels, statusLabel];
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: "open",
              labels: "governance,heartbeat"
            });

            const existing = issues.find(issue => issue.title === issueTitle);

            if (existing) {
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: existing.number,
                body,
                labels: allLabels
              });
              core.info(`‚úÖ Updated existing heartbeat issue #${existing.number} with label: ${statusLabel}`);
            } else {
              const { data: newIssue } = await github.rest.issues.create({
                owner,
                repo,
                title: issueTitle,
                body,
                labels: allLabels
              });
              core.info(`üÜï Created new heartbeat issue #${newIssue.number} with label: ${statusLabel}`);
            }

# noop
