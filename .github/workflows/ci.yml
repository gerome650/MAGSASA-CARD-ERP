name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel superseded runs to save CI resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-uv-py3.11-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-py3.11-
            ${{ runner.os }}-uv-
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies with retry
        run: |
          for i in 1 2 3; do 
            uv sync --dev && break || { 
              echo "Attempt $i failed, retrying..."; 
              sleep 5; 
            }
          done
      
      - name: Run ruff (linting)
        run: uv run ruff check packages/ src/
      
      - name: Run black (formatting check)
        run: uv run black --check packages/ src/
      
      - name: Run mypy (type checking)
        run: uv run mypy packages/ src/ --ignore-missing-imports || true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        # Temporarily focus on Python 3.11 for stability
        python-version: ["3.11"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-uv-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-py${{ matrix.python-version }}-
            ${{ runner.os }}-uv-
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies with retry
        run: |
          for i in 1 2 3; do 
            uv sync --dev && break || { 
              echo "Attempt $i failed, retrying..."; 
              sleep 5; 
            }
          done
      
      - name: Install pytest-rerunfailures for flaky test handling
        run: uv pip install pytest-rerunfailures
      
      - name: Run tests with retries for flaky tests
        run: uv run pytest tests/ -v --tb=short --cov=packages --cov-report=xml --reruns 2 --reruns-delay 1 --maxfail=5 -n=auto
      
      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  mcp-dry-run:
    name: MCP Dry Run
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-format, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-uv-py3.11-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-py3.11-
            ${{ runner.os }}-uv-
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies with retry
        run: |
          for i in 1 2 3; do 
            uv sync --dev && break || { 
              echo "Attempt $i failed, retrying..."; 
              sleep 5; 
            }
          done
      
      - name: Enable MCP Mode
        run: echo "AGS_MCP_ENABLED=true" >> $GITHUB_ENV
      
      - name: MCP Readiness Check
        run: uv run ags mcp-check
      
      - name: Run Agent Simulation
        run: uv run ags agent run all --trace
      
      - name: Validate Logs
        run: |
          uv run ags agent run all 2>&1 | grep -q "request_id" || exit 1
          uv run ags agent run all 2>&1 | grep -q "latency_ms" || exit 1
          echo "✅ MCP dry run passed"

  build:
    name: Build Packages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-format, test, mcp-dry-run]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-uv-py3.11-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-py3.11-
            ${{ runner.os }}-uv-
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Build packages
        run: uv build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
      
      - name: Install security tools
        run: |
          pip install bandit[toml] safety pip-audit
      
      - name: Run Bandit security scanner
        run: |
          bandit -r packages/ src/ -f json -o bandit-report.json || true
          bandit -r packages/ src/ --severity-level medium --confidence-level medium --configfile .bandit
      
      - name: Run pip-audit for vulnerability scanning
        run: |
          pip-audit --desc --fix-dryrun || echo "⚠️  Found vulnerabilities (non-blocking)"
      
      - name: Verify dependency versions
        run: |
          pip check || echo "⚠️  Dependency check warnings"
          pip list --outdated || true
      
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json

  readiness-gate:
    name: Release Readiness Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-format, test, security-scan]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          pip install PyGithub rich python-dotenv
      
      - name: Check release readiness (gate enforcement)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/update_release_dashboard.py --check-only --verbose
      
      - name: Generate readiness report
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/update_release_dashboard.py --dry-run --verbose

  pr-comment:
    name: PR Readiness Comment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    needs: [readiness-gate]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          pip install PyGithub rich python-dotenv
      
      - name: Post readiness comment to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/update_release_dashboard.py --pr-comment --verbose || echo "⚠️  PR comment failed (non-blocking)"

  verify_pipeline:
    name: Final Pipeline Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, readiness-gate, security-scan]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-verify-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-verify-

      - name: Install verification dependencies
        run: |
          python -m pip install --upgrade pip
          pip install rich==13.7.0 PyGithub==2.3.0 requests==2.31.0 tabulate==0.9.0 bandit==1.7.8

      - name: Final verification gate
        run: |
          python scripts/verify_release_pipeline.py --ci --verbose

      - name: Upload verification report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verification-report
          path: |
            reports/
          retention-days: 7
