name: 📊 CI Pro Dashboard (Pages + Slack + Trends)

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: "0 7 * * *"  # Daily at 07:00 UTC
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  ci-pro-dashboard:
    name: 🚀 Build CI Dashboard & Publish
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      # 1) Checkout repo (main)
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Checkout gh-pages (to read history.json if exists)
      - name: 📥 Checkout gh-pages (existing dashboard)
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: _site
        continue-on-error: true

      # 3) Setup Python
      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 4) Install deps for tests + lint + parsing
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry || true
          if [ -f pyproject.toml ]; then
            poetry install
          fi
          pip install pytest pytest-json-report coverage ruff jq lxml

      # 5) Lint (Ruff) -> JSON
      - name: 📏 Ruff Lint (JSON)
        id: lint
        continue-on-error: true
        run: |
          ruff check . --output-format=json > lint-report.json || true
          errors=$(jq '. | length' lint-report.json 2>/dev/null || echo 0)
          echo "errors=$errors" >> $GITHUB_OUTPUT

      # 6) Run tests + coverage + pytest JSON report
      - name: 🧪 Tests + Coverage (JSON & XML)
        id: tests
        run: |
          pytest -q --disable-warnings --tb=short \
            --json-report --json-report-file=pytest-report.json \
            --cov=. --cov-report=xml --cov-report=term
          passed=$(jq '.summary.passed // 0' pytest-report.json)
          failed=$(jq '.summary.failed // 0' pytest-report.json)
          total=$((passed + failed))
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT
          echo "total=$total" >> $GITHUB_OUTPUT

      # 7) Compute coverage percent from coverage.xml
      - name: 📈 Extract Coverage %
        id: coverage
        run: |
          # Parse coverage.xml line-rate (Cobertura-like format)
          pct=$(grep -oPm1 "(?<=line-rate=\")[^\"]+" coverage.xml | awk '{print $1 * 100}')
          rounded=$(printf "%.1f" "$pct")
          echo "coverage=$rounded" >> $GITHUB_OUTPUT

      # 8) Compute CI duration from job start (fallback to now if commit TS missing)
      - name: ⏱️ Compute CI Duration
        id: duration
        run: |
          if [ -n "${{ github.event.head_commit.timestamp }}" ]; then
            start=$(date -d "${{ github.event.head_commit.timestamp }}" +%s)
          else
            start=$(date +%s)
          fi
          now=$(date +%s)
          dur=$((now - start))
          mins=$((dur / 60)); secs=$((dur % 60))
          echo "seconds=$dur" >> $GITHUB_OUTPUT
          echo "pretty=${mins}m ${secs}s" >> $GITHUB_OUTPUT

      # 9) Install chart builder deps (none extra, HTML uses CDN)
      # 10) Generate dashboard data + badges + index.html
      - name: 🧠 Generate Dashboard (JSON + Badges + HTML)
        run: |
          python scripts/generate_dashboard.py \
            --pytest-json pytest-report.json \
            --coverage-xml coverage.xml \
            --ruff-json lint-report.json \
            --prev-site "_site/ci-dashboard" \
            --out "ci-dashboard" \
            --repo "${{ github.repository }}" \
            --run-url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --commit "${{ github.sha }}" \
            --branch "${{ github.ref_name }}" \
            --actor "${{ github.actor }}" \
            --duration-seconds "${{ steps.duration.outputs.seconds }}" \
            --duration-pretty "${{ steps.duration.outputs.pretty }}"

      # 11) Upload as artifact (optional)
      - name: 📤 Upload dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-dashboard
          path: ci-dashboard

      # 12) Publish to gh-pages under /ci-dashboard
      - name: 📡 Publish GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ci-dashboard
          destination_dir: ci-dashboard

      # 13) Slack summary (always)
      - name: 📣 Slack Summary
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                { "type": "header", "text": { "type": "plain_text", "text": "📊 CI Dashboard Update — ${{ github.repository }}", "emoji": true } },
                { "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Branch:*\n`${{ github.ref_name }}`" },
                    { "type": "mrkdwn", "text": "*Commit:*\n<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>" },
                    { "type": "mrkdwn", "text": "*Tests:*\n${{ steps.tests.outputs.passed }}/${{ steps.tests.outputs.total }} passed" },
                    { "type": "mrkdwn", "text": "*Lint Issues:*\n${{ steps.lint.outputs.errors }}" },
                    { "type": "mrkdwn", "text": "*Coverage:*\n${{ steps.coverage.outputs.coverage }}%" },
                    { "type": "mrkdwn", "text": "*Duration:*\n${{ steps.duration.outputs.pretty }}" }
                  ]
                },
                { "type": "actions",
                  "elements": [
                    { "type": "button",
                      "text": { "type": "plain_text", "text": "🔗 View Dashboard", "emoji": true },
                      "url": "https://gerome650.github.io/MAGSASA-CARD-ERP/ci-dashboard/"
                    },
                    { "type": "button",
                      "text": { "type": "plain_text", "text": "🔗 View Run", "emoji": true },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                },
                { "type": "context", "elements": [ { "type": "mrkdwn", "text": "🚦 Status: *${{ job.status }}*, triggered by *${{ github.actor }}*" } ] }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

