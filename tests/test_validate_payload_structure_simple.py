#!/usr/bin/env python3
"""
Simplified Test Suite for Payload Structure Validation
======================================================

Tests the core Slack payload validation functionality.
"""

import os

# Add scripts directory to path for imports
import sys
import unittest

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "scripts"))

from validate_slack_payload import SlackPayloadValidator


class TestSlackPayloadValidator(unittest.TestCase):
    """Test Slack payload validation functionality."""

    def setUp(self):
        """Set up test fixtures."""
        self.validator = SlackPayloadValidator()

        # Valid payload example
        self.valid_payload = {
            "blocks": [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "ðŸ“Š Merge Quality Report",
                        "emoji": True,
                    },
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": "*Merge Score:*\n`85%` âœ…"},
                        {"type": "mrkdwn", "text": "*Status:*\nON TRACK"},
                    ],
                },
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {
                                "type": "plain_text",
                                "text": "View Dashboard",
                                "emoji": True,
                            },
                            "url": "https://example.com/dashboard",
                        }
                    ],
                },
                {
                    "type": "context",
                    "elements": [
                        {"type": "mrkdwn", "text": "Generated by Merge Quality System"}
                    ],
                },
            ],
            "color": "#56d364",
        }

    def test_validate_valid_payload(self):
        """Test validation of valid payload."""
        is_valid, errors = self.validator.validate_payload(self.valid_payload)

        self.assertTrue(is_valid)
        self.assertEqual(len(errors), 0)

    def test_validate_missing_blocks(self):
        """Test validation with missing blocks field."""
        payload = {"color": "#56d364"}
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Missing required 'blocks' field", errors[0])

    def test_validate_blocks_not_array(self):
        """Test validation with blocks not being an array."""
        payload = {"blocks": "not an array"}
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("'blocks' must be an array", errors[0])

    def test_validate_block_missing_type(self):
        """Test validation with block missing type field."""
        payload = {"blocks": [{"text": {"type": "plain_text", "text": "Hello"}}]}
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Missing required 'type' field", errors[0])

    def test_validate_invalid_block_type(self):
        """Test validation with invalid block type."""
        payload = {
            "blocks": [
                {
                    "type": "invalid_type",
                    "text": {"type": "plain_text", "text": "Hello"},
                }
            ]
        }
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Invalid type 'invalid_type'", errors[0])

    def test_validate_header_block_missing_text(self):
        """Test validation of header block missing text."""
        payload = {"blocks": [{"type": "header"}]}
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Missing required 'text' field", errors[0])

    def test_validate_button_element_missing_text(self):
        """Test validation of button element missing text."""
        payload = {
            "blocks": [
                {
                    "type": "actions",
                    "elements": [{"type": "button", "action_id": "test_button"}],
                }
            ]
        }
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Missing required 'text' field", errors[0])

    def test_validate_button_element_no_action(self):
        """Test validation of button element with no url or action_id."""
        payload = {
            "blocks": [
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "Test Button"},
                        }
                    ],
                }
            ]
        }
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Must have either 'url' or 'action_id'", errors[0])

    def test_validate_text_object_missing_type(self):
        """Test validation of text object missing type."""
        payload = {"blocks": [{"type": "header", "text": {"text": "Hello"}}]}
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Missing required 'type' field", errors[0])

    def test_validate_text_object_missing_text(self):
        """Test validation of text object missing text."""
        payload = {"blocks": [{"type": "header", "text": {"type": "plain_text"}}]}
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Missing required 'text' field", errors[0])

    def test_validate_color_invalid_format(self):
        """Test validation of invalid color format."""
        payload = {
            "blocks": [
                {"type": "header", "text": {"type": "plain_text", "text": "Hello"}}
            ],
            "color": "invalid_color",
        }
        is_valid, errors = self.validator.validate_payload(payload)

        self.assertFalse(is_valid)
        self.assertIn("Color must start with #", errors[0])

    def test_suggest_fixes(self):
        """Test fix suggestions generation."""
        payload = {"color": "#56d364"}
        errors = ["Missing required 'blocks' field"]

        suggestions = self.validator.suggest_fixes(payload, errors)

        self.assertIn("Add 'blocks' array to payload root", suggestions)

    def test_create_example_payload(self):
        """Test example payload creation."""
        example = self.validator.create_example_payload()

        # Validate the example
        is_valid, errors = self.validator.validate_payload(example)
        self.assertTrue(is_valid)
        self.assertEqual(len(errors), 0)

        # Check structure
        self.assertIn("blocks", example)
        self.assertIsInstance(example["blocks"], list)
        self.assertGreater(len(example["blocks"]), 0)


if __name__ == "__main__":
    unittest.main()
