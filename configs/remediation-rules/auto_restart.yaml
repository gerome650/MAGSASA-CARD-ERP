# Auto Restart Remediation Rules
# Automated remediation actions for service failures

api_version: v1
kind: RemediationRule
metadata:
  name: auto-restart-remediation
  namespace: magsasa-card-erp
  labels:
    app: magsasa-card-erp
    component: remediation

spec:
  triggers:
    - name: pod-crash-loop
      condition: |
        kube_pod_status_phase{phase="Running"} == 0
        and
        increase(kube_pod_container_status_restarts_total[10m]) > 3
      severity: warning
      
    - name: service-unavailable
      condition: |
        up{job="magsasa-card-erp"} == 0
        and
        increase(http_requests_total{code=~"5.."}[5m]) > 10
      severity: critical
      
    - name: high-error-rate
      condition: |
        rate(http_requests_total{code=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.1
      severity: warning

  actions:
    - name: restart-deployment
      trigger: pod-crash-loop
      type: kubectl
      command: |
        kubectl rollout restart deployment/magsasa-card-erp
        kubectl rollout status deployment/magsasa-card-erp --timeout=300s
      
    - name: scale-up-replicas
      trigger: service-unavailable
      type: kubectl
      command: |
        kubectl scale deployment magsasa-card-erp --replicas=3
        kubectl rollout status deployment/magsasa-card-erp --timeout=300s
      
    - name: health-check-restart
      trigger: high-error-rate
      type: script
      script: |
        #!/bin/bash
        echo "High error rate detected, performing health check restart"
        kubectl exec -n magsasa-card-erp deployment/magsasa-card-erp -- /bin/sh -c "curl -f http://localhost:5000/health || exit 1"
        if [ $? -ne 0 ]; then
          kubectl rollout restart deployment/magsasa-card-erp
        fi

  escalation:
    - name: notify-team
      condition: |
        time() - alertmanager_alerts{state="firing"} > 300
      action: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"ðŸš¨ MAGSASA-CARD-ERP service requires manual intervention"}' \
        $SLACK_WEBHOOK_URL

  cooldown:
    restart-deployment: 300s
    scale-up-replicas: 600s
    health-check-restart: 120s
